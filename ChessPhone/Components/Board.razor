@using ChessPhone.Core.Models
@using ChessPhone.Core
@using ChessPhone.Core.Repositories
@using ChessPhone.Core.Services
@inject ISnackbar Snackbar
@inject IChessPieceService ChessPieceService

@if (_combination != null)
{
    <MudPaper Class="overflow-auto m-auto mb-5" Elevation="5" MaxHeight="100px">
        <MudText Class="text-break"
                 Align="Align.Center"
                 Typo="Typo.body1">
            @_combination
        </MudText>
    </MudPaper>
}

<MudPaper Class="m-auto" Elevation="5" Width="300px">
    <MudText Class="mb-3"
             Align="Align.Center"
             Typo="Typo.h4">
        @ChessPiece.Name
    </MudText>
    <MudGrid Class="text-center">
        @foreach (var square in _boxes)
        {
            <MudItem xs="4">
                <MudAvatar Class="m-auto" Style="height: 60px; width: 60px" Color="square.Value.Color">
                    @square.Key
                </MudAvatar>
            </MudItem>
        }
        <MudItem xs="12">
            <MudTextField Variant="Variant.Filled"
                          Disabled="_running"
                          Label="Permutations"
                          Immediate="true"
                          T="int"
                          InputType="InputType.Number"
                          @bind-Value="@_permutations"/>
        </MudItem>

        <MudItem xs="6">
            <MudButton Variant="Variant.Filled"
                       Disabled="_running"
                       Color="Color.Success"
                       Size="Size.Large"
                       StartIcon="@Icons.Material.Filled.PlayArrow"
                       OnClick="@Run">
                Run
            </MudButton>
        </MudItem>       
        <MudItem xs="6">
            <MudButton Variant="Variant.Filled"
                       Disabled="!_running"
                       Color="Color.Error"
                       Size="Size.Large"
                       StartIcon="@Icons.Material.Filled.Stop"
                       OnClick="@(()=> _stop = true)">
                Stop
            </MudButton>
        </MudItem>

    </MudGrid>
</MudPaper>

@code {
    [EditorRequired]
    [Parameter]
    public required ChessPiece ChessPiece { get; set; }
    [EditorRequired]
    [Parameter]
    public required Core.Models.Board CurrentBoard { get; set; }
    private Dictionary<string, DisplayBox> _boxes = new();
    private bool _running;
    private string? _combination;
    private int _permutations = 7;
    private bool _stop;

    protected override void OnInitialized()
    {
        _boxes = CurrentBoard.Boxes
            .ToDictionary(x => x.Name, x => new DisplayBox(x, GetColor(x.IsValid)));
    }

    private string Calculate() 
        => ChessPieceService.GetRandomCombination(ChessPiece, CurrentBoard, _permutations);

    private async Task Run()
    {
        _running = true;
        _combination = Calculate();

        if (!string.IsNullOrEmpty(_combination))
        {
            string? previous = null;
            foreach (var value in _combination)
            {
                if (previous != null)
                {
                    _boxes[previous].Color = Color.Dark;
                }
                previous = value.ToString();
                _boxes[previous].Color = Color.Warning;
                StateHasChanged();
                if (_stop)
                {
                    break;
                }
                await Task.Delay(1000);
            }
            _stop = false;
        }
        else
        {
            Snackbar.Add("No available combinations for the given piece", Severity.Error);
        }
        Reset();
        _running = false;
    }

    private void Reset()
    {
        var keys = _boxes.Where(x 
            => x.Value.Color is Color.Warning or Color.Dark)
            .Select(x => x.Key);
        foreach (var key in keys)
        {
            _boxes[key].Color = Color.Primary;
        }
    }
    private static Color GetColor(bool isValid)
        => isValid ? Color.Primary : Color.Error;

}
